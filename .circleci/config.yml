# .circleci/config.yml

version: 2.1

orbs:
  node: circleci/node@1.1.6
  queue: eddiewebb/queue@1.0.110

commands:
  await-previous-builds:
    parameters:
      branch:
        description: The branch to wait on
        type: string
    steps:
      - queue/until_front_of_line:
          time: "30" # how long a queue will wait until the job exits
          only-on-branch: <<parameters.branch>> # restrict queueing to a specific branch (default *)
          consider-job: false # block whole workflow if any job still running
  install-node:
    steps:
      - run:
          name: Install Node 12 (Required for Yarn)
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install v12.13.1' >> $BASH_ENV
            echo 'nvm alias default v12.13.1' >> $BASH_ENV
            sudo mkdir ~/.config
            sudo chown -R $USER:$GROUP ~/.config
  generate-checksums:
    steps:
      - run:
          name: "Generate initial checksum manifests"
          command: |
            mkdir .manifests
            scripts/generate-manifest.js .manifests/native_code '^Podfile' '^Makefile' '^Gemfile' '^emission/' '^Artsy'
            scripts/generate-manifest.js .manifests/node_modules '^yarn\.lock$' '^patches/'
            scripts/generate-manifest.js .manifests/query_map '^src/__generated__/' '^relay\.config\.js'
            scripts/generate-manifest.js .manifests/js_transform '^\.manifests/node_modules' '^babel\.config\.js' '^relay\.config\.js' '^jest\.config\.js'
            scripts/generate-manifest.js .manifests/js_bundle '^\.manifests/js_transform' '^data/' '^index\.ios\.js' '^src/(?!.*(__tests__|__mocks__|__fixtures__))'
            scripts/generate-manifest.js .manifests/js_test_results '^\.manifests/js_transform' '^data/' '^src/'
            scripts/generate-manifest.js .manifests/cocoapods '^Podfile'
  install-node-modules:
    steps:
      - restore_cache:
          keys:
            - v2-node_modules-{{ checksum ".manifests/node_modules" }}-{{ arch }}
      - run:
          name: Install node modules
          command: ls node_modules || yarn install
      - save_cache:
          key: v2-node_modules-{{ checksum ".manifests/node_modules" }}-{{ arch }}
          paths:
            - node_modules
      - run:
          name: Test custom cache save
          command: node Cache.js save
      - run:
          name: Test custom cache restore
          command: node Cache.js restore
  generate-query-map:
    steps:
      - restore_cache:
          keys:
            - v3-query_map-{{ checksum ".manifests/query_map" }}
      - run:
          name: Compile query map
          command: ls data/complete.queryMap.json || yarn relay
      - save_cache:
          key: v3-query_map-{{ checksum ".manifests/query_map" }}
          paths:
            - data/complete.queryMap.json
  test-js:
    steps:
      - restore_cache:
          keys:
            - v3-jest-{{ .Branch }}
      - restore_cache:
          keys:
            - v3-js_test_results-{{ checksum ".manifests/js_test_results" }}
      - run:
          name: Run TypeScript check
          command: ls test-results.json || yarn type-check
      - run:
          name: Run TSLint check
          command: ls test-results.json || yarn lint
      - run:
          name: Run jest tests
          command: ls test-results.json || yarn jest --outputFile test-results.json --json --ci --forceExit --runInBand
      - save_cache:
          key: v3-js_test_results-{{ checksum ".manifests/js_test_results" }}
          paths:
            - test-results.json
      - save_cache:
          key: v3-jest-{{ .Branch }}
          paths:
            - .jest
  bundle-js:
    steps:
      - restore_cache:
          keys:
            - v4-js_bundle-{{ checksum ".manifests/js_bundle" }}
      - restore_cache:
          keys:
            - v4-metro-{{ checksum ".manifests/js_transform" }}
      - run:
          name: Bundle emission
          command: ls emission/Pod/Assets/Emission.js || yarn bundle-for-native-ci
      - save_cache:
          key: v4-metro-{{ checksum ".manifests/js_transform" }}
          paths:
            - .metro
      - save_cache:
          key: v4-js_bundle-{{ checksum ".manifests/js_bundle" }}
          paths:
            - emission/Pod/Assets/Emission.js
            - emission/Pod/Assets/Emission.map.js
            - emission/Pod/Assets/assets
  install-gems:
    steps:
      - restore_cache:
          keys:
            - v1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  install-cocoapods:
    steps:
      - restore_cache:
          keys:
            - v5-pods-{{ checksum ".manifests/cocoapods" }}
      - run:
          name: Install Pods
          command: ls Pods || bundle exec pod install
      - run:
          name: Update echo
          command: ls Artsy/App/Echo.json || make update_echo
      - save_cache:
          key: v5-pods-{{ checksum ".manifests/cocoapods" }}
          paths:
            - Pods
            # this changes after pod install because we don't instal dev tools on CI
            # so we save it to the cache to avoid comparison errors with Pods/Manifest.lock
            - Podfile.lock
  build-app:
    steps:
      - restore_cache:
          keys:
            - v4-app_build-{{ checksum ".manifests/app_build" }}
      - run:
          name: Build App
          command: ls derived_data || make ci
      - save_cache:
          key: v4-app_build-{{ checksum ".manifests/app_build" }}
          paths:
            - derived_data

jobs:
  update-metaphysics:
    executor:
      name: node/default
      tag: "12.13.1"
    steps:
      - checkout
      - generate-checksums
      - install-node-modules
      - generate-query-map
      - await-previous-builds:
          branch: beta
      - run:
          name: Update metaphysics
          command: yarn update-metaphysics

  build-test-js:
    executor:
      name: node/default
      tag: "12.13.1"
    steps:
      - checkout
      - generate-checksums
      - install-node-modules
      - generate-query-map
      - test-js
      - bundle-js
      - run:
          name: Generate app_build manifest
          command: ./scripts/generate-manifest.js .manifests/app_build '^\./manifests/native_code' '^emission/Pod/Assets/'
      - store_artifacts:
          path: .manifests
      - persist_to_workspace:
          root: .
          paths:
            - .manifests
            - emission/Pod/Assets

  build-test-app:
    environment:
      UPLOAD_IOS_SNAPSHOT_BUCKET_NAME: eigen-ci
      BUNDLE_PATH: vendor/bundle # path to install gems and use for caching

    macos:
      xcode: "11.3.0"

    steps:
      - attach_workspace:
          at: ../workspace
      - restore_cache:
          keys:
            - v4-test-success-{{ checksum "../workspace/.manifests/native_code" }}
      # we can quit the macos build early if there were no native code changes
      # and we're not on the beta branch
      - run:
          name: Quit early if possible
          command: |
            if test $CIRCLE_BRANCH != beta && ls xcode_test_raw.log
            then
              circleci step halt
            fi
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: List sims + devices
          command: |
            xcversion simulators
            instruments -s device
      - install-node
      - install-node-modules
      - install-gems
      - install-cocoapods
      - build-app
      - run:
          name: Run tests if native code has changed
          command: ls xcode_test_raw.log || make ci-test
      - save_cache:
          key: v4-test-success-{{ checksum ".manifests/native_code" }}
          paths:
            - xcode_test_raw.log

      - store_artifacts:
          path: xcode_build_raw.log
          prefix: build

      - store_artifacts:
          path: xcode_test_raw.log
          prefix: tests

      - store_test_results:
          path: test-results.xml

      - run:
          name: Danger
          command: bundle exec danger --danger_id=circle
            --dangerfile=Dangerfile.circle.rb --verbose

      - await-previous-builds:
          branch: beta
      - run:
          name: Deploy if beta
          command: make deploy_if_beta_branch

  promote-beta-to-app-store:
    environment:
      BUNDLE_PATH: vendor/bundle # path to install gems and use for caching
    macos:
      xcode: "11.3.0"
    steps:
      - install-gems
      - await-previous-builds:
          branch: app_store_submission
      - run:
          name: Promote if app_store_submission
          command: make promote_if_app_store_submission_branch

workflows:
  version: 2
  promote:
    jobs:
      - promote-beta-to-app-store:
          filters:
            branches:
              only:
                - app_store_submission

  test-build-deploy:
    jobs:
      - build-test-js
      - build-test-app:
          requires:
            - build-test-js
      - update-metaphysics:
          requires:
            - build-test-js
          filters:
            branches:
              only:
                - beta
